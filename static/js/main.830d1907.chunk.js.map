{"version":3,"sources":["components/Emoji.js","components/Main.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Emoji","data","clicktest","onClick","className","character","unicodeName","split","map","i","charAt","toUpperCase","slice","toLowerCase","join","Main","state","favicon","title","category","display","setState","console","log","this","props","test","axios","get","res","Array","from","Set","group","e","b","navigator","clipboard","writeText","language","style","vs","rel","href","key","slug","React","Component","Header","Footerer","App","path","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2RAiBeA,EAfD,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UACpB,OACE,oCACE,yBACAC,QAAS,kBAAMD,EAAUD,IACzBG,UAAU,cACR,4BAAKH,EAAKI,WACV,2BACGJ,EAAKK,YAAYC,MAAM,KAAKC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SAASC,cAAgBF,EAAEG,MAAM,GAAGC,iBAAeC,KAAK,S,kBCmE3FC,E,4MAnEbC,MAAQ,CACNf,KAAM,GACNgB,QAAS,GACTC,MAAO,gCACPC,SAAU,GACVC,QAAS,I,EAcXlB,UAAY,SAACD,GACX,IAAMiB,EAAQjB,EAAKK,YAAYC,MAAM,KAAKC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SAASC,cAAgBF,EAAEG,MAAM,GAAGC,iBAAeC,KAAK,KAC7G,EAAKO,SAAS,CAACJ,QAAShB,EAAKI,UAAWa,W,2LAbxCI,QAAQC,IAAIC,KAAKC,MAAMC,M,kBAELC,IAAMC,IAAIJ,KAAKC,MAAMC,M,OAAjCG,E,OACEV,EAAWW,MAAMC,KAAK,IAAIC,IAAIH,EAAI5B,KAAKO,KAAI,SAAAC,GAAC,OAAIA,EAAEwB,WACxDT,KAAKH,SAAS,CAACpB,KAAM4B,EAAI5B,KAAMgB,QAAS,GAAIE,a,gDAE5CG,QAAQC,IAAR,M,gJAWOW,GACT,IAAMC,EAAC,wLAC6IX,KAAKR,MAAMC,QADxJ,mBAEPmB,UAAUC,UAAUC,UAAUH,K,+BAItB,IAAD,OACP,OACE,8BACCb,QAAQC,IAAIC,KAAKR,OAChBQ,KAAKR,MAAMC,SACb,oCACA,oEACA,kBAAC,IAAD,CAAmBsB,SAAS,OAAOC,MAAOC,KAA1C,uLAEiJjB,KAAKR,MAAMC,QAF5J,2BAQA,kBAAC,IAAD,KAAQ,0BAAMyB,IAAI,OAAOC,KAAI,yIAAoInB,KAAKR,MAAMC,QAA/I,oBAC7B,kBAAC,IAAD,KAAQ,+BAAQO,KAAKR,MAAME,QAC3B,+CACA,yBAAKd,UAAU,kBACdoB,KAAKR,MAAMf,KAAKO,KAAI,SAAAC,GAAC,OACpB,kBAAC,EAAD,CACEmC,IAAKnC,EAAEoC,KACP5C,KAAQQ,EACRP,UAAW,EAAKA,UAChBc,MAAO,EAAKA,iB,GAzDH8B,IAAMC,WCIVC,EAXA,WACb,OACE,gCACI,6CACA,2FCIOC,EARE,WACf,OACE,gCACE,oE,sBCsBSC,MApBf,WACE,OACE,kBAAC,IAAD,KAEA,yBAAK9C,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+C,KAAK,KACV,kBAAC,EAAD,CAAMzB,KAAK,uFAGf,kBAAC0B,EAAD,SCNcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB1B,WACrBA,UAAU2B,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,a","file":"static/js/main.830d1907.chunk.js","sourcesContent":["import React from 'react'\n\nconst Emoji = ({data, clicktest}) => {\n  return (\n    <>\n      <div \n      onClick={() => clicktest(data)}\n      className=\"emoji-card\">\n        <h2>{data.character}</h2>\n        <p>\n          {data.unicodeName.split(' ').map(i => i.charAt().toUpperCase() + i.slice(1).toLowerCase()).join(' ')}\n        </p>\n      </div>\n    </>\n  )\n}\n\nexport default Emoji","import React from 'react'\nimport axios from 'axios'\nimport Helmet from 'react-helmet'\nimport Emoji from './Emoji'\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { vs } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\n\n\nclass Main extends React.Component {\n  state = {\n    data: [],\n    favicon: '',\n    title: 'Emoji Favicons: Pick an emoji',\n    category: [],\n    display: []\n  }\n  async componentDidMount() {\n    console.log(this.props.test)\n    try {\n      let res = await axios.get(this.props.test)\n      const category = Array.from(new Set(res.data.map(i => i.group)))\n      this.setState({data: res.data, favicon: '', category})\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n\n  clicktest = (data) => {\n    const title = data.unicodeName.split(' ').map(i => i.charAt().toUpperCase() + i.slice(1).toLowerCase()).join(' ')\n    this.setState({favicon: data.character, title})\n    \n  }\n\n  handleCopy(e) {\n    const b = `<meta charset=\"UTF-8\">\n<link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>${this.state.favicon}</text></svg>\">`\n    navigator.clipboard.writeText(b)\n  }\n\n\n  render() {\n    return (\n      <main>\n      {console.log(this.state)}\n      { this.state.favicon &&\n      <>\n      <h2>Code: Copy into head of your website</h2>\n      <SyntaxHighlighter language=\"html\" style={vs}>\n        {`<meta charset=\"UTF-8\">\n<link rel=\"icon\" href=data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>${this.state.favicon}</text></svg>></link>`} \n      </SyntaxHighlighter>\n      \n      </>\n        }\n\n      <Helmet><link rel=\"icon\" href={`data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>${this.state.favicon}</text></svg>`}></link></Helmet>\n      <Helmet><title>{this.state.title}</title></Helmet>\n      <h2>Emojis Selector</h2>\n      <div className=\"wrapper-emojis\">\n      {this.state.data.map(i => (\n        <Emoji \n          key={i.slug}\n          data = {i}\n          clicktest={this.clicktest}\n          state={this.state}\n        />\n      ))\n      }\n      </div>\n\n      </main>\n    )\n  }\n}\n\nexport default Main","import React from 'react'\n\nconst Header = () => {\n  return (\n    <header>\n        <h1>Emoji Favicon</h1>\n        <p>\n          This simple way to add emojis as favicons on your website.\n        </p>\n    </header>\n  )\n}\n\nexport default Header","import React from 'react'\n\nconst Footerer = () => {\n  return (\n    <footer>\n      <span>Created by John Magnus Robertson</span>\n    </footer>\n  )\n}\n\nexport default Footerer","import React from 'react';\nimport Main from './components/Main.js'\nimport Header from './components/Header.js'\nimport Footer from './components/Footer.js'\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n\n    <div className=\"wrapper\">\n      <Header/>\n      <Switch>\n        <Route path='*'>\n          <Main test='https://emoji-api.com/emojis?access_key=5e5972b95944d2d54c5f6ed9aa6c4554ed12421a'/>\n        </Route>\n      </Switch>\n      <Footer/>\n    </div>\n    </Router>\n  )\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}